"""Implementation of statechart model.
Generated by itemis CREATE code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

class Model:
	"""Implementation of the state machine Model.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_calibration_process,
			main_region_calibration_process_r1idle,
			main_region_calibration_process_r1offset_calibration,
			main_region_calibration_process_r1offset_correction,
			main_region_calibration_process_r1aligned,
			main_region_calibration_process_r1calibration_completeted,
			main_region_manual_control,
			main_region_manual_control_manual_control_region_idle,
			main_region_manual_control_manual_control_region_in_action,
			main_region_manual_control_manual_control_region_decreasing_speed,
			main_region_manual_control_manual_control_region_increasing_speed,
			main_region_manual_control_manual_control_region_turning_right,
			main_region_manual_control_manual_control_region_turning_left,
			main_region_automatic_exploration,
			main_region_automatic_exploration_general_normal_moving,
			main_region_automatic_exploration_general_left_wall_disappeared,
			main_region_automatic_exploration_general_wall_in_front,
			main_region_automatic_exploration_general_turn_left,
			main_region_automatic_exploration_general_move_forward,
			main_region_automatic_exploration_general_turn_and_go,
			main_region_automatic_exploration_general_go,
			main_region_automatic_exploration_general_return,
			main_region_automatic_exploration_general_to_right,
			main_region_automatic_exploration_general_go2,
			main_region_automatic_exploration_moving_moving,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1normal,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1moving,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2normal,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_left,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_right,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_back,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2plus,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2minus,
			main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2,
			main_region_automatic_exploration_moving_moving_r2turn_impl,
			main_region_automatic_exploration_moving_moving_r2turn_impl_r1normal,
			main_region_automatic_exploration_moving_moving_r2turn_impl_r1negative_rotation,
			main_region_automatic_exploration_moving_moving_r2turn_impl_r1positive_rotation,
			main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr2,
			main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr3,
			main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr2,
			main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3,
			null_state
		) = range(45)
	
	
	class UserVar:
		"""Implementation of scope UserVar.
		"""
		
		def __init__(self, statemachine):
			self.base_speed = None
			self.base_rotation = None
			self.startprocedure = None
			self.move = None
			self.xmem = None
			self.ymem = None
			self.turn_back = None
			self.turn_left = None
			self.turn_right = None
			self.angle_targ = None
			
			self.statemachine = statemachine
		
	
	class BaseValues:
		"""Implementation of scope BaseValues.
		"""
		
		def __init__(self, statemachine):
			self.max_speed = None
			self.max_rotation = None
			self.degrees_front = None
			self.degrees_right = None
			self.degrees_back = None
			self.degrees_left = None
			
			self.statemachine = statemachine
		
	
	class Output:
		"""Implementation of scope Output.
		"""
		
		def __init__(self, statemachine):
			self.speed = None
			self.rotation = None
			self.obstacles = None
			self.gems = None
			self.finish = None
			
			self.statemachine = statemachine
		
	
	class Grid:
		"""Implementation of scope Grid.
		"""
		
		def __init__(self, statemachine):
			self.update = None
			self.receive = None
			self.column = None
			self.row = None
			self.orientation = None
			self.visited = None
			self.wall_front = None
			self.wall_right = None
			self.wall_back = None
			self.wall_left = None
			self.grid_size = None
			self.max_col = None
			self.max_row = None
			
			self.statemachine = statemachine
		
	
	class StartPos:
		"""Implementation of scope StartPos.
		"""
		
		def __init__(self, statemachine):
			self.set_zero = None
			self.zero_x = None
			self.zero_y = None
			self.zero_south_degree = None
			self.laser_deg_offset = None
			
			self.statemachine = statemachine
		
	
	class Computer:
		"""Implementation of scope Computer.
		"""
		
		def __init__(self, statemachine):
			self.m_press = None
			self.w_press = None
			self.a_press = None
			self.s_press = None
			self.d_press = None
			self.x_press = None
			
			self.statemachine = statemachine
		
		def raise_m_press(self):
			"""Raise method for event m_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_m_press_call)
			self.statemachine.run_cycle()
		
		def __raise_m_press_call(self):
			"""Raise callback for event m_press.
			"""
			self.m_press = True
		
		def raise_w_press(self):
			"""Raise method for event w_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_w_press_call)
			self.statemachine.run_cycle()
		
		def __raise_w_press_call(self):
			"""Raise callback for event w_press.
			"""
			self.w_press = True
		
		def raise_a_press(self):
			"""Raise method for event a_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_a_press_call)
			self.statemachine.run_cycle()
		
		def __raise_a_press_call(self):
			"""Raise callback for event a_press.
			"""
			self.a_press = True
		
		def raise_s_press(self):
			"""Raise method for event s_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_s_press_call)
			self.statemachine.run_cycle()
		
		def __raise_s_press_call(self):
			"""Raise callback for event s_press.
			"""
			self.s_press = True
		
		def raise_d_press(self):
			"""Raise method for event d_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_d_press_call)
			self.statemachine.run_cycle()
		
		def __raise_d_press_call(self):
			"""Raise callback for event d_press.
			"""
			self.d_press = True
		
		def raise_x_press(self):
			"""Raise method for event x_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_x_press_call)
			self.statemachine.run_cycle()
		
		def __raise_x_press_call(self):
			"""Raise callback for event x_press.
			"""
			self.x_press = True
		
	
	class Imu:
		"""Implementation of scope Imu.
		"""
		
		def __init__(self, statemachine):
			self.pitch = None
			self.roll = None
			self.yaw = None
			
			self.statemachine = statemachine
		
	
	class Odom:
		"""Implementation of scope Odom.
		"""
		
		def __init__(self, statemachine):
			self.x = None
			self.y = None
			self.z = None
			
			self.statemachine = statemachine
		
	
	class LaserDistance:
		"""Implementation of scope LaserDistance.
		"""
		
		def __init__(self, statemachine):
			self.d0 = None
			self.d90 = None
			self.d180 = None
			self.dm90 = None
			self.dmin = None
			self.min_deg = None
			self.dmax = None
			self.max_deg = None
			self.dmean = None
			self.dfront_min = None
			self.min_deg_f = None
			self.dfront_max = None
			self.max_deg_f = None
			self.dfront_mean = None
			self.dright_min = None
			self.min_deg_r = None
			self.dright_max = None
			self.max_deg_r = None
			self.dright_mean = None
			self.dback_min = None
			self.min_deg_b = None
			self.dback_max = None
			self.max_deg_b = None
			self.dback_mean = None
			self.dleft_min = None
			self.min_deg_l = None
			self.dleft_max = None
			self.max_deg_l = None
			self.dleft_mean = None
			
			self.statemachine = statemachine
		
	
	class LaserIntensity:
		"""Implementation of scope LaserIntensity.
		"""
		
		def __init__(self, statemachine):
			self.i0 = None
			self.i90 = None
			self.i180 = None
			self.im90 = None
			self.ifront_min = None
			self.ifront_max = None
			self.ifront_mean = None
			self.iright_min = None
			self.iright_max = None
			self.iright_mean = None
			self.iback_min = None
			self.iback_max = None
			self.iback_mean = None
			self.ileft_min = None
			self.ileft_max = None
			self.ileft_mean = None
			
			self.statemachine = statemachine
		
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		self.user_var = Model.UserVar(self)
		self.base_values = Model.BaseValues(self)
		self.output = Model.Output(self)
		self.grid = Model.Grid(self)
		self.start_pos = Model.StartPos(self)
		self.computer = Model.Computer(self)
		self.imu = Model.Imu(self)
		self.odom = Model.Odom(self)
		self.laser_distance = Model.LaserDistance(self)
		self.laser_intensity = Model.LaserIntensity(self)
		
		self.__internal_event_queue = queue.Queue()
		self.in_event_queue = queue.Queue()
		self.__aligned = None
		self.__laser_offset = None
		self.__calculate_laser_offset = None
		self.__ct_sp1 = None
		self.__ct_thr1 = None
		self.__ct_sp2 = None
		self.__ct_thr2 = None
		self.__ct_sp3 = None
		self.start_turn = None
		self.finished_turn = None
		
		# enumeration of all states:
		self.__State = Model.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 4
		for __state_index in range(4):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 4
		
		# initializations:
		#Default init sequence for statechart model
		self.__aligned = False
		self.__laser_offset = 0.0
		self.__calculate_laser_offset = 0.0
		self.__ct_sp1 = 0.2
		self.__ct_thr1 = 4.0
		self.__ct_sp2 = 0.02
		self.__ct_thr2 = 1.0
		self.__ct_sp3 = 0.02
		self.user_var.base_speed = 0.05
		self.user_var.base_rotation = 0.2
		self.user_var.startprocedure = True
		self.user_var.move = -(1.0)
		self.user_var.xmem = 0.0
		self.user_var.ymem = 0.0
		self.user_var.turn_back = False
		self.user_var.turn_left = False
		self.user_var.turn_right = False
		self.user_var.angle_targ = 0
		self.base_values.max_speed = 0.22
		self.base_values.max_rotation = 2.84
		self.base_values.degrees_front = 10
		self.base_values.degrees_right = 10
		self.base_values.degrees_back = 10
		self.base_values.degrees_left = 10
		self.output.speed = 0.0
		self.output.rotation = 0.0
		self.output.obstacles = 0
		self.output.gems = 0
		self.output.finish = 0
		self.grid.update = False
		self.grid.receive = False
		self.grid.column = 0
		self.grid.row = 0
		self.grid.orientation = 0
		self.grid.visited = False
		self.grid.wall_front = 0
		self.grid.wall_right = 0
		self.grid.wall_back = 0
		self.grid.wall_left = 0
		self.grid.grid_size = 0.48
		self.grid.max_col = 3
		self.grid.max_row = 3
		self.start_pos.set_zero = False
		self.start_pos.zero_x = 0.0
		self.start_pos.zero_y = 0.0
		self.start_pos.zero_south_degree = 0.0
		self.start_pos.laser_deg_offset = 0
		self.imu.pitch = 0.0
		self.imu.roll = 0.0
		self.imu.yaw = 0.0
		self.odom.x = 0.0
		self.odom.y = 0.0
		self.odom.z = 0.0
		self.laser_distance.d0 = 0.0
		self.laser_distance.d90 = 0.0
		self.laser_distance.d180 = 0.0
		self.laser_distance.dm90 = 0.0
		self.laser_distance.dmin = 0.0
		self.laser_distance.min_deg = 0
		self.laser_distance.dmax = 0.0
		self.laser_distance.max_deg = 0
		self.laser_distance.dmean = 0.0
		self.laser_distance.dfront_min = 0.0
		self.laser_distance.min_deg_f = 0
		self.laser_distance.dfront_max = 0.0
		self.laser_distance.max_deg_f = 0
		self.laser_distance.dfront_mean = 0.0
		self.laser_distance.dright_min = 0.0
		self.laser_distance.min_deg_r = 0
		self.laser_distance.dright_max = 0.0
		self.laser_distance.max_deg_r = 0
		self.laser_distance.dright_mean = 0.0
		self.laser_distance.dback_min = 0.0
		self.laser_distance.min_deg_b = 0
		self.laser_distance.dback_max = 0.0
		self.laser_distance.max_deg_b = 0
		self.laser_distance.dback_mean = 0.0
		self.laser_distance.dleft_min = 0.0
		self.laser_distance.min_deg_l = 0
		self.laser_distance.dleft_max = 0.0
		self.laser_distance.max_deg_l = 0
		self.laser_distance.dleft_mean = 0.0
		self.laser_intensity.i0 = 0.0
		self.laser_intensity.i90 = 0.0
		self.laser_intensity.i180 = 0.0
		self.laser_intensity.im90 = 0.0
		self.laser_intensity.ifront_min = 0.0
		self.laser_intensity.ifront_max = 0.0
		self.laser_intensity.ifront_mean = 0.0
		self.laser_intensity.iright_min = 0.0
		self.laser_intensity.iright_max = 0.0
		self.laser_intensity.iright_mean = 0.0
		self.laser_intensity.iback_min = 0.0
		self.laser_intensity.iback_max = 0.0
		self.laser_intensity.iback_mean = 0.0
		self.laser_intensity.ileft_min = 0.0
		self.laser_intensity.ileft_max = 0.0
		self.laser_intensity.ileft_mean = 0.0
		self.__completed = False
		self.__do_completion = False
		self.__is_executing = False
		self.__state_conf_vector_position = None
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or self.__state_vector[3] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_calibration_process:
			return (self.__state_vector[0] >= self.__State.main_region_calibration_process)\
				and (self.__state_vector[0] <= self.__State.main_region_calibration_process_r1calibration_completeted)
		if s == self.__State.main_region_calibration_process_r1idle:
			return self.__state_vector[0] == self.__State.main_region_calibration_process_r1idle
		if s == self.__State.main_region_calibration_process_r1offset_calibration:
			return self.__state_vector[0] == self.__State.main_region_calibration_process_r1offset_calibration
		if s == self.__State.main_region_calibration_process_r1offset_correction:
			return self.__state_vector[0] == self.__State.main_region_calibration_process_r1offset_correction
		if s == self.__State.main_region_calibration_process_r1aligned:
			return self.__state_vector[0] == self.__State.main_region_calibration_process_r1aligned
		if s == self.__State.main_region_calibration_process_r1calibration_completeted:
			return self.__state_vector[0] == self.__State.main_region_calibration_process_r1calibration_completeted
		if s == self.__State.main_region_manual_control:
			return (self.__state_vector[0] >= self.__State.main_region_manual_control)\
				and (self.__state_vector[0] <= self.__State.main_region_manual_control_manual_control_region_turning_left)
		if s == self.__State.main_region_manual_control_manual_control_region_idle:
			return self.__state_vector[0] == self.__State.main_region_manual_control_manual_control_region_idle
		if s == self.__State.main_region_manual_control_manual_control_region_in_action:
			return self.__state_vector[0] == self.__State.main_region_manual_control_manual_control_region_in_action
		if s == self.__State.main_region_manual_control_manual_control_region_decreasing_speed:
			return self.__state_vector[0] == self.__State.main_region_manual_control_manual_control_region_decreasing_speed
		if s == self.__State.main_region_manual_control_manual_control_region_increasing_speed:
			return self.__state_vector[0] == self.__State.main_region_manual_control_manual_control_region_increasing_speed
		if s == self.__State.main_region_manual_control_manual_control_region_turning_right:
			return self.__state_vector[0] == self.__State.main_region_manual_control_manual_control_region_turning_right
		if s == self.__State.main_region_manual_control_manual_control_region_turning_left:
			return self.__state_vector[0] == self.__State.main_region_manual_control_manual_control_region_turning_left
		if s == self.__State.main_region_automatic_exploration:
			return (self.__state_vector[0] >= self.__State.main_region_automatic_exploration)\
				and (self.__state_vector[0] <= self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3)
		if s == self.__State.main_region_automatic_exploration_general_normal_moving:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_normal_moving
		if s == self.__State.main_region_automatic_exploration_general_left_wall_disappeared:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_left_wall_disappeared
		if s == self.__State.main_region_automatic_exploration_general_wall_in_front:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_wall_in_front
		if s == self.__State.main_region_automatic_exploration_general_turn_left:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_turn_left
		if s == self.__State.main_region_automatic_exploration_general_move_forward:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_move_forward
		if s == self.__State.main_region_automatic_exploration_general_turn_and_go:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_turn_and_go
		if s == self.__State.main_region_automatic_exploration_general_go:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_go
		if s == self.__State.main_region_automatic_exploration_general_return:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_return
		if s == self.__State.main_region_automatic_exploration_general_to_right:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_to_right
		if s == self.__State.main_region_automatic_exploration_general_go2:
			return self.__state_vector[0] == self.__State.main_region_automatic_exploration_general_go2
		if s == self.__State.main_region_automatic_exploration_moving_moving:
			return (self.__state_vector[1] >= self.__State.main_region_automatic_exploration_moving_moving)\
				and (self.__state_vector[1] <= self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3)
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back:
			return (self.__state_vector[1] >= self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back)\
				and (self.__state_vector[1] <= self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2)
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1normal:
			return self.__state_vector[1] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1normal
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1moving:
			return self.__state_vector[1] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1moving
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2normal:
			return self.__state_vector[2] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2normal
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_left:
			return self.__state_vector[2] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_left
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_right:
			return self.__state_vector[2] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_right
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_back:
			return self.__state_vector[2] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_back
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle:
			return self.__state_vector[2] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2plus:
			return self.__state_vector[2] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2plus
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2minus:
			return self.__state_vector[2] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2minus
		if s == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2:
			return self.__state_vector[2] == self.__State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2
		if s == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl:
			return (self.__state_vector[3] >= self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl)\
				and (self.__state_vector[3] <= self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3)
		if s == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1normal:
			return self.__state_vector[3] == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1normal
		if s == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1negative_rotation:
			return self.__state_vector[3] == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1negative_rotation
		if s == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1positive_rotation:
			return self.__state_vector[3] == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1positive_rotation
		if s == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr2:
			return self.__state_vector[3] == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr2
		if s == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr3:
			return self.__state_vector[3] == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr3
		if s == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr2:
			return self.__state_vector[3] == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr2
		if s == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3:
			return self.__state_vector[3] == self.__State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(4):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.__internal_event_queue.empty():
			return self.__internal_event_queue.get()
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	
	def raise_start_turn(self):
		"""Raise method for event start_turn.
		"""
		self.__internal_event_queue.put(self.__raise_start_turn_call)
	
	def __raise_start_turn_call(self):
		"""Raise callback for event start_turn.
		"""
		self.start_turn = True
	
	def raise_finished_turn(self):
		"""Raise method for event finished_turn.
		"""
		self.__internal_event_queue.put(self.__raise_finished_turn_call)
	
	def __raise_finished_turn_call(self):
		"""Raise callback for event finished_turn.
		"""
		self.finished_turn = True
	
	def __entry_action_main_region_calibration_process_r1_idle(self):
		""".
		"""
		#Entry action for state 'Idle'.
		self.output.speed = 0.0
		self.output.rotation = 0.0
		self.__completed = True
		
	def __entry_action_main_region_calibration_process_r1_offset_calibration(self):
		"""Entry action for state 'Offset Calibration'..
		"""
		#Entry action for state 'Offset Calibration'.
		self.__laser_offset = self.__calculate_laser_offset
		
	def __entry_action_main_region_calibration_process_r1_offset_correction(self):
		""".
		"""
		#Entry action for state 'Offset Correction'.
		self.output.rotation = self.user_var.base_rotation if (self.__laser_offset > 0.0) else -(self.user_var.base_rotation)
		self.__completed = True
		
	def __entry_action_main_region_calibration_process_r1_aligned(self):
		""".
		"""
		#Entry action for state 'Aligned'.
		self.output.rotation = 0.0
		self.start_pos.set_zero = True
		self.start_pos.zero_x = self.odom.x
		self.start_pos.zero_y = self.odom.y
		self.start_pos.zero_south_degree = self.imu.yaw
		self.start_pos.laser_deg_offset = 0
		self.__completed = True
		
	def __entry_action_main_region_calibration_process_r1_calibration_completeted(self):
		"""Entry action for state 'Calibration Completeted'..
		"""
		#Entry action for state 'Calibration Completeted'.
		self.output.finish = 1
		
	def __entry_action_main_region_manual_control(self):
		"""Entry action for state 'Manual Control'..
		"""
		#Entry action for state 'Manual Control'.
		self.timer_service.set_timer(self, 0, (1000 * 1000), False)
		
	def __entry_action_main_region_manual_control_manual_control_region_idle(self):
		"""Entry action for state 'Idle'..
		"""
		#Entry action for state 'Idle'.
		self.output.speed = 0.0
		self.output.rotation = 0.0
		
	def __entry_action_main_region_manual_control_manual_control_region_decreasing_speed(self):
		""".
		"""
		#Entry action for state 'Decreasing speed'.
		self.output.speed = (self.output.speed - 0.02) if self.output.speed > 0.02 else 0.0
		self.__completed = True
		
	def __entry_action_main_region_manual_control_manual_control_region_increasing_speed(self):
		""".
		"""
		#Entry action for state 'Increasing speed'.
		self.output.speed = (self.output.speed + 0.02) if self.output.speed < 0.2 else 0.22
		self.__completed = True
		
	def __entry_action_main_region_manual_control_manual_control_region_turning_right(self):
		""".
		"""
		#Entry action for state 'Turning right'.
		self.output.rotation = (self.output.rotation - 0.02) if self.output.rotation > -(2.82) else -(2.84)
		self.__completed = True
		
	def __entry_action_main_region_manual_control_manual_control_region_turning_left(self):
		""".
		"""
		#Entry action for state 'Turning left'.
		self.output.rotation = (self.output.rotation + 0.02) if self.output.rotation < 2.82 else 2.84
		self.__completed = True
		
	def __entry_action_main_region_automatic_exploration_general_normal_moving(self):
		"""Entry action for state 'normal_moving'..
		"""
		#Entry action for state 'normal_moving'.
		self.output.speed = 0.05
		self.output.rotation = 0.0
		
	def __entry_action_main_region_automatic_exploration_general_left_wall_disappeared(self):
		"""Entry action for state 'left_wall_disappeared'..
		"""
		#Entry action for state 'left_wall_disappeared'.
		self.user_var.move = (self.grid.grid_size / 2.0)
		
	def __entry_action_main_region_automatic_exploration_general_wall_in_front(self):
		"""Entry action for state 'wall_in_front'..
		"""
		#Entry action for state 'wall_in_front'.
		self.timer_service.set_timer(self, 1, (2 * 1000), False)
		self.timer_service.set_timer(self, 2, (2 * 1000), False)
		self.output.speed = 0.0
		
	def __entry_action_main_region_automatic_exploration_general_turn_left(self):
		"""Entry action for state 'turn left'..
		"""
		#Entry action for state 'turn left'.
		self.user_var.turn_left = True
		
	def __entry_action_main_region_automatic_exploration_general_move_forward(self):
		"""Entry action for state 'move forward'..
		"""
		#Entry action for state 'move forward'.
		self.user_var.move = 0.5
		
	def __entry_action_main_region_automatic_exploration_general_turn_and_go(self):
		"""Entry action for state 'turn and go'..
		"""
		#Entry action for state 'turn and go'.
		self.user_var.turn_left = True
		
	def __entry_action_main_region_automatic_exploration_general_go(self):
		"""Entry action for state 'go'..
		"""
		#Entry action for state 'go'.
		self.user_var.move = self.grid.grid_size
		
	def __entry_action_main_region_automatic_exploration_general_return(self):
		"""Entry action for state 'return'..
		"""
		#Entry action for state 'return'.
		self.user_var.turn_back = True
		
	def __entry_action_main_region_automatic_exploration_general_to_right(self):
		"""Entry action for state 'to right'..
		"""
		#Entry action for state 'to right'.
		self.user_var.turn_right = True
		
	def __entry_action_main_region_automatic_exploration_general_go2(self):
		"""Entry action for state 'go2'..
		"""
		#Entry action for state 'go2'.
		self.user_var.move = self.grid.grid_size
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal(self):
		"""Entry action for state 'normal'..
		"""
		#Entry action for state 'normal'.
		self.user_var.move = -(1.0)
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving(self):
		"""Entry action for state 'moving'..
		"""
		#Entry action for state 'moving'.
		self.output.speed = 0.049
		self.user_var.xmem = self.odom.x
		self.user_var.ymem = self.odom.y
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal(self):
		"""Entry action for state 'normal'..
		"""
		#Entry action for state 'normal'.
		self.output.rotation = 0.0
		self.user_var.turn_back = False
		self.user_var.turn_right = False
		self.user_var.turn_left = False
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left(self):
		""".
		"""
		#Entry action for state 'turnLeft'.
		self.user_var.angle_targ = (self.imu.yaw + 90)
		self.__completed = True
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right(self):
		""".
		"""
		#Entry action for state 'turnRight'.
		self.user_var.angle_targ = (self.imu.yaw - 90)
		self.__completed = True
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back(self):
		""".
		"""
		#Entry action for state 'turnBack'.
		self.user_var.angle_targ = (self.imu.yaw + 180)
		self.__completed = True
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle(self):
		"""Entry action for state 'processingAngle'..
		"""
		#Entry action for state 'processingAngle'.
		self.timer_service.set_timer(self, 3, (1 * 1000), False)
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus(self):
		""".
		"""
		#Entry action for state 'plus'.
		self.user_var.angle_targ = self.user_var.angle_targ + 360
		self.__completed = True
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus(self):
		""".
		"""
		#Entry action for state 'minus'.
		self.user_var.angle_targ = self.user_var.angle_targ - 360
		self.__completed = True
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2(self):
		"""Entry action for state 'processingAngle2'..
		"""
		#Entry action for state 'processingAngle2'.
		self.raise_start_turn()
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal(self):
		"""Entry action for state 'normal'..
		"""
		#Entry action for state 'normal'.
		self.output.rotation = 0.0
		self.raise_finished_turn()
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation(self):
		"""Entry action for state 'negativeRotation'..
		"""
		#Entry action for state 'negativeRotation'.
		self.output.rotation = -(self.__ct_sp1)
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation(self):
		"""Entry action for state 'positiveRotation'..
		"""
		#Entry action for state 'positiveRotation'.
		self.output.rotation = self.__ct_sp1
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2(self):
		"""Entry action for state 'pR2'..
		"""
		#Entry action for state 'pR2'.
		self.output.rotation = self.__ct_sp2
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3(self):
		"""Entry action for state 'pR3'..
		"""
		#Entry action for state 'pR3'.
		self.output.rotation = self.__ct_sp3
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2(self):
		"""Entry action for state 'nR2'..
		"""
		#Entry action for state 'nR2'.
		self.output.rotation = -(self.__ct_sp2)
		
	def __entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3(self):
		"""Entry action for state 'nR3'..
		"""
		#Entry action for state 'nR3'.
		self.output.rotation = -(self.__ct_sp3)
		
	def __exit_action_main_region_calibration_process_r1_offset_calibration(self):
		"""Exit action for state 'Offset Calibration'..
		"""
		#Exit action for state 'Offset Calibration'.
		self.__aligned = ((self.__laser_offset * self.__laser_offset)) <= ((0.05 * 0.05))
		
	def __exit_action_main_region_calibration_process_r1_offset_correction(self):
		"""Exit action for state 'Offset Correction'..
		"""
		#Exit action for state 'Offset Correction'.
		self.__laser_offset = self.__calculate_laser_offset
		
	def __exit_action_main_region_manual_control(self):
		"""Exit action for state 'Manual Control'..
		"""
		#Exit action for state 'Manual Control'.
		self.timer_service.unset_timer(self, 0)
		
	def __exit_action_main_region_automatic_exploration_general_wall_in_front(self):
		"""Exit action for state 'wall_in_front'..
		"""
		#Exit action for state 'wall_in_front'.
		self.timer_service.unset_timer(self, 1)
		self.timer_service.unset_timer(self, 2)
		
	def __exit_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle(self):
		"""Exit action for state 'processingAngle'..
		"""
		#Exit action for state 'processingAngle'.
		self.timer_service.unset_timer(self, 3)
		
	def __enter_sequence_main_region_calibration_process_default(self):
		"""'default' enter sequence for state Calibration Process.
		"""
		#'default' enter sequence for state Calibration Process
		self.__enter_sequence_main_region_calibration_process_r1_default()
		
	def __enter_sequence_main_region_calibration_process_r1_idle_default(self):
		"""'default' enter sequence for state Idle.
		"""
		#'default' enter sequence for state Idle
		self.__entry_action_main_region_calibration_process_r1_idle()
		self.__state_vector[0] = self.State.main_region_calibration_process_r1idle
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_calibration_process_r1_offset_correction_default(self):
		"""'default' enter sequence for state Offset Correction.
		"""
		#'default' enter sequence for state Offset Correction
		self.__entry_action_main_region_calibration_process_r1_offset_correction()
		self.__state_vector[0] = self.State.main_region_calibration_process_r1offset_correction
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_calibration_process_r1_aligned_default(self):
		"""'default' enter sequence for state Aligned.
		"""
		#'default' enter sequence for state Aligned
		self.__entry_action_main_region_calibration_process_r1_aligned()
		self.__state_vector[0] = self.State.main_region_calibration_process_r1aligned
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_manual_control_default(self):
		"""'default' enter sequence for state Manual Control.
		"""
		#'default' enter sequence for state Manual Control
		self.__entry_action_main_region_manual_control()
		self.__enter_sequence_main_region_manual_control_manual_control_region_default()
		
	def __enter_sequence_main_region_manual_control_manual_control_region_idle_default(self):
		"""'default' enter sequence for state Idle.
		"""
		#'default' enter sequence for state Idle
		self.__entry_action_main_region_manual_control_manual_control_region_idle()
		self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_idle
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_manual_control_manual_control_region_decreasing_speed_default(self):
		"""'default' enter sequence for state Decreasing speed.
		"""
		#'default' enter sequence for state Decreasing speed
		self.__entry_action_main_region_manual_control_manual_control_region_decreasing_speed()
		self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_decreasing_speed
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_manual_control_manual_control_region_increasing_speed_default(self):
		"""'default' enter sequence for state Increasing speed.
		"""
		#'default' enter sequence for state Increasing speed
		self.__entry_action_main_region_manual_control_manual_control_region_increasing_speed()
		self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_increasing_speed
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_manual_control_manual_control_region_turning_right_default(self):
		"""'default' enter sequence for state Turning right.
		"""
		#'default' enter sequence for state Turning right
		self.__entry_action_main_region_manual_control_manual_control_region_turning_right()
		self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_turning_right
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_manual_control_manual_control_region_turning_left_default(self):
		"""'default' enter sequence for state Turning left.
		"""
		#'default' enter sequence for state Turning left
		self.__entry_action_main_region_manual_control_manual_control_region_turning_left()
		self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_turning_left
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_default(self):
		"""'default' enter sequence for state automatic exploration.
		"""
		#'default' enter sequence for state automatic exploration
		self.__enter_sequence_main_region_automatic_exploration_general_default()
		self.__enter_sequence_main_region_automatic_exploration_moving_default()
		
	def __enter_sequence_main_region_automatic_exploration_general_normal_moving_default(self):
		"""'default' enter sequence for state normal_moving.
		"""
		#'default' enter sequence for state normal_moving
		self.__entry_action_main_region_automatic_exploration_general_normal_moving()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_normal_moving
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_left_wall_disappeared_default(self):
		"""'default' enter sequence for state left_wall_disappeared.
		"""
		#'default' enter sequence for state left_wall_disappeared
		self.__entry_action_main_region_automatic_exploration_general_left_wall_disappeared()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_left_wall_disappeared
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_wall_in_front_default(self):
		"""'default' enter sequence for state wall_in_front.
		"""
		#'default' enter sequence for state wall_in_front
		self.__entry_action_main_region_automatic_exploration_general_wall_in_front()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_wall_in_front
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_turn_left_default(self):
		"""'default' enter sequence for state turn left.
		"""
		#'default' enter sequence for state turn left
		self.__entry_action_main_region_automatic_exploration_general_turn_left()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_turn_left
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_move_forward_default(self):
		"""'default' enter sequence for state move forward.
		"""
		#'default' enter sequence for state move forward
		self.__entry_action_main_region_automatic_exploration_general_move_forward()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_move_forward
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_turn_and_go_default(self):
		"""'default' enter sequence for state turn and go.
		"""
		#'default' enter sequence for state turn and go
		self.__entry_action_main_region_automatic_exploration_general_turn_and_go()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_turn_and_go
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_go_default(self):
		"""'default' enter sequence for state go.
		"""
		#'default' enter sequence for state go
		self.__entry_action_main_region_automatic_exploration_general_go()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_go
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_return_default(self):
		"""'default' enter sequence for state return.
		"""
		#'default' enter sequence for state return
		self.__entry_action_main_region_automatic_exploration_general_return()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_return
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_to_right_default(self):
		"""'default' enter sequence for state to right.
		"""
		#'default' enter sequence for state to right
		self.__entry_action_main_region_automatic_exploration_general_to_right()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_to_right
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_general_go2_default(self):
		"""'default' enter sequence for state go2.
		"""
		#'default' enter sequence for state go2
		self.__entry_action_main_region_automatic_exploration_general_go2()
		self.__state_vector[0] = self.State.main_region_automatic_exploration_general_go2
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_default(self):
		"""'default' enter sequence for state moving.
		"""
		#'default' enter sequence for state moving
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_default()
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_default(self):
		"""'default' enter sequence for state move and turn back.
		"""
		#'default' enter sequence for state move and turn back
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_default()
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal_default(self):
		"""'default' enter sequence for state normal.
		"""
		#'default' enter sequence for state normal
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal()
		self.__state_vector[1] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1normal
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving_default(self):
		"""'default' enter sequence for state moving.
		"""
		#'default' enter sequence for state moving
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving()
		self.__state_vector[1] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1moving
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal_default(self):
		"""'default' enter sequence for state normal.
		"""
		#'default' enter sequence for state normal
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal()
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2normal
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left_default(self):
		"""'default' enter sequence for state turnLeft.
		"""
		#'default' enter sequence for state turnLeft
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left()
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_left
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right_default(self):
		"""'default' enter sequence for state turnRight.
		"""
		#'default' enter sequence for state turnRight
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right()
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_right
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back_default(self):
		"""'default' enter sequence for state turnBack.
		"""
		#'default' enter sequence for state turnBack
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back()
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_back
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus_default(self):
		"""'default' enter sequence for state plus.
		"""
		#'default' enter sequence for state plus
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus()
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2plus
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus_default(self):
		"""'default' enter sequence for state minus.
		"""
		#'default' enter sequence for state minus
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus()
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2minus
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2_default(self):
		"""'default' enter sequence for state processingAngle2.
		"""
		#'default' enter sequence for state processingAngle2
		self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2()
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_default(self):
		"""'default' enter sequence for state turnImpl.
		"""
		#'default' enter sequence for state turnImpl
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal_default(self):
		"""'default' enter sequence for state normal.
		"""
		#'default' enter sequence for state normal
		self.__entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal()
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1normal
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation_default(self):
		"""'default' enter sequence for state negativeRotation.
		"""
		#'default' enter sequence for state negativeRotation
		self.__entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation()
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1negative_rotation
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation_default(self):
		"""'default' enter sequence for state positiveRotation.
		"""
		#'default' enter sequence for state positiveRotation
		self.__entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation()
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1positive_rotation
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2_default(self):
		"""'default' enter sequence for state pR2.
		"""
		#'default' enter sequence for state pR2
		self.__entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2()
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr2
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3_default(self):
		"""'default' enter sequence for state pR3.
		"""
		#'default' enter sequence for state pR3
		self.__entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3()
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr3
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2_default(self):
		"""'default' enter sequence for state nR2.
		"""
		#'default' enter sequence for state nR2
		self.__entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2()
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr2
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3_default(self):
		"""'default' enter sequence for state nR3.
		"""
		#'default' enter sequence for state nR3
		self.__entry_action_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3()
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		#'default' enter sequence for region main region
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_calibration_process_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_calibration_process_r1__entry_default()
		
	def __enter_sequence_main_region_manual_control_manual_control_region_default(self):
		"""'default' enter sequence for region manual control region.
		"""
		#'default' enter sequence for region manual control region
		self.__react_main_region_manual_control_manual_control_region__entry_default()
		
	def __enter_sequence_main_region_automatic_exploration_general_default(self):
		"""'default' enter sequence for region general.
		"""
		#'default' enter sequence for region general
		self.__react_main_region_automatic_exploration_general__entry_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_default(self):
		"""'default' enter sequence for region moving.
		"""
		#'default' enter sequence for region moving
		self.__react_main_region_automatic_exploration_moving__entry_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_automatic_exploration_moving_moving_r1__entry_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1__entry_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_default(self):
		"""'default' enter sequence for region r2.
		"""
		#'default' enter sequence for region r2
		self.__react_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2__entry_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_default(self):
		"""'default' enter sequence for region r2.
		"""
		#'default' enter sequence for region r2
		self.__react_main_region_automatic_exploration_moving_moving_r2__entry_default()
		
	def __enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1__entry_default()
		
	def __exit_sequence_main_region_calibration_process(self):
		"""Default exit sequence for state Calibration Process.
		"""
		#Default exit sequence for state Calibration Process
		self.__exit_sequence_main_region_calibration_process_r1()
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_calibration_process_r1_idle(self):
		"""Default exit sequence for state Idle.
		"""
		#Default exit sequence for state Idle
		self.__state_vector[0] = self.State.main_region_calibration_process
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_calibration_process_r1_offset_calibration(self):
		"""Default exit sequence for state Offset Calibration.
		"""
		#Default exit sequence for state Offset Calibration
		self.__state_vector[0] = self.State.main_region_calibration_process
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_calibration_process_r1_offset_calibration()
		
	def __exit_sequence_main_region_calibration_process_r1_offset_correction(self):
		"""Default exit sequence for state Offset Correction.
		"""
		#Default exit sequence for state Offset Correction
		self.__state_vector[0] = self.State.main_region_calibration_process
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_calibration_process_r1_offset_correction()
		
	def __exit_sequence_main_region_calibration_process_r1_aligned(self):
		"""Default exit sequence for state Aligned.
		"""
		#Default exit sequence for state Aligned
		self.__state_vector[0] = self.State.main_region_calibration_process
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_calibration_process_r1_calibration_completeted(self):
		"""Default exit sequence for state Calibration Completeted.
		"""
		#Default exit sequence for state Calibration Completeted
		self.__state_vector[0] = self.State.main_region_calibration_process
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_manual_control(self):
		"""Default exit sequence for state Manual Control.
		"""
		#Default exit sequence for state Manual Control
		self.__exit_sequence_main_region_manual_control_manual_control_region()
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_manual_control()
		
	def __exit_sequence_main_region_manual_control_manual_control_region_idle(self):
		"""Default exit sequence for state Idle.
		"""
		#Default exit sequence for state Idle
		self.__state_vector[0] = self.State.main_region_manual_control
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_manual_control_manual_control_region_in_action(self):
		"""Default exit sequence for state In action.
		"""
		#Default exit sequence for state In action
		self.__state_vector[0] = self.State.main_region_manual_control
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_manual_control_manual_control_region_decreasing_speed(self):
		"""Default exit sequence for state Decreasing speed.
		"""
		#Default exit sequence for state Decreasing speed
		self.__state_vector[0] = self.State.main_region_manual_control
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_manual_control_manual_control_region_increasing_speed(self):
		"""Default exit sequence for state Increasing speed.
		"""
		#Default exit sequence for state Increasing speed
		self.__state_vector[0] = self.State.main_region_manual_control
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_manual_control_manual_control_region_turning_right(self):
		"""Default exit sequence for state Turning right.
		"""
		#Default exit sequence for state Turning right
		self.__state_vector[0] = self.State.main_region_manual_control
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_manual_control_manual_control_region_turning_left(self):
		"""Default exit sequence for state Turning left.
		"""
		#Default exit sequence for state Turning left
		self.__state_vector[0] = self.State.main_region_manual_control
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration(self):
		"""Default exit sequence for state automatic exploration.
		"""
		#Default exit sequence for state automatic exploration
		self.__exit_sequence_main_region_automatic_exploration_general()
		self.__exit_sequence_main_region_automatic_exploration_moving()
		self.__state_vector[0] = self.State.null_state
		self.__state_vector[1] = self.State.null_state
		self.__state_vector[2] = self.State.null_state
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_automatic_exploration_general_normal_moving(self):
		"""Default exit sequence for state normal_moving.
		"""
		#Default exit sequence for state normal_moving
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_general_left_wall_disappeared(self):
		"""Default exit sequence for state left_wall_disappeared.
		"""
		#Default exit sequence for state left_wall_disappeared
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_general_wall_in_front(self):
		"""Default exit sequence for state wall_in_front.
		"""
		#Default exit sequence for state wall_in_front
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_automatic_exploration_general_wall_in_front()
		
	def __exit_sequence_main_region_automatic_exploration_general_turn_left(self):
		"""Default exit sequence for state turn left.
		"""
		#Default exit sequence for state turn left
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_general_move_forward(self):
		"""Default exit sequence for state move forward.
		"""
		#Default exit sequence for state move forward
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_general_turn_and_go(self):
		"""Default exit sequence for state turn and go.
		"""
		#Default exit sequence for state turn and go
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_general_go(self):
		"""Default exit sequence for state go.
		"""
		#Default exit sequence for state go
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_general_return(self):
		"""Default exit sequence for state return.
		"""
		#Default exit sequence for state return
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_general_to_right(self):
		"""Default exit sequence for state to right.
		"""
		#Default exit sequence for state to right
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_general_go2(self):
		"""Default exit sequence for state go2.
		"""
		#Default exit sequence for state go2
		self.__state_vector[0] = self.State.main_region_automatic_exploration
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal(self):
		"""Default exit sequence for state normal.
		"""
		#Default exit sequence for state normal
		self.__state_vector[1] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving(self):
		"""Default exit sequence for state moving.
		"""
		#Default exit sequence for state moving
		self.__state_vector[1] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal(self):
		"""Default exit sequence for state normal.
		"""
		#Default exit sequence for state normal
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left(self):
		"""Default exit sequence for state turnLeft.
		"""
		#Default exit sequence for state turnLeft
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right(self):
		"""Default exit sequence for state turnRight.
		"""
		#Default exit sequence for state turnRight
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back(self):
		"""Default exit sequence for state turnBack.
		"""
		#Default exit sequence for state turnBack
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle(self):
		"""Default exit sequence for state processingAngle.
		"""
		#Default exit sequence for state processingAngle
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 2
		self.__exit_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus(self):
		"""Default exit sequence for state plus.
		"""
		#Default exit sequence for state plus
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus(self):
		"""Default exit sequence for state minus.
		"""
		#Default exit sequence for state minus
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2(self):
		"""Default exit sequence for state processingAngle2.
		"""
		#Default exit sequence for state processingAngle2
		self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl(self):
		"""Default exit sequence for state turnImpl.
		"""
		#Default exit sequence for state turnImpl
		self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1()
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal(self):
		"""Default exit sequence for state normal.
		"""
		#Default exit sequence for state normal
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation(self):
		"""Default exit sequence for state negativeRotation.
		"""
		#Default exit sequence for state negativeRotation
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation(self):
		"""Default exit sequence for state positiveRotation.
		"""
		#Default exit sequence for state positiveRotation
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2(self):
		"""Default exit sequence for state pR2.
		"""
		#Default exit sequence for state pR2
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3(self):
		"""Default exit sequence for state pR3.
		"""
		#Default exit sequence for state pR3
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2(self):
		"""Default exit sequence for state nR2.
		"""
		#Default exit sequence for state nR2
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3(self):
		"""Default exit sequence for state nR3.
		"""
		#Default exit sequence for state nR3
		self.__state_vector[3] = self.State.main_region_automatic_exploration_moving_moving_r2turn_impl
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		#Default exit sequence for region main region
		state = self.__state_vector[0]
		if state == self.State.main_region_calibration_process:
			self.__exit_sequence_main_region_calibration_process()
		elif state == self.State.main_region_calibration_process_r1idle:
			self.__exit_sequence_main_region_calibration_process_r1_idle()
		elif state == self.State.main_region_calibration_process_r1offset_calibration:
			self.__exit_sequence_main_region_calibration_process_r1_offset_calibration()
		elif state == self.State.main_region_calibration_process_r1offset_correction:
			self.__exit_sequence_main_region_calibration_process_r1_offset_correction()
		elif state == self.State.main_region_calibration_process_r1aligned:
			self.__exit_sequence_main_region_calibration_process_r1_aligned()
		elif state == self.State.main_region_calibration_process_r1calibration_completeted:
			self.__exit_sequence_main_region_calibration_process_r1_calibration_completeted()
		elif state == self.State.main_region_manual_control:
			self.__exit_sequence_main_region_manual_control()
		elif state == self.State.main_region_manual_control_manual_control_region_idle:
			self.__exit_sequence_main_region_manual_control_manual_control_region_idle()
			self.__exit_action_main_region_manual_control()
		elif state == self.State.main_region_manual_control_manual_control_region_in_action:
			self.__exit_sequence_main_region_manual_control_manual_control_region_in_action()
			self.__exit_action_main_region_manual_control()
		elif state == self.State.main_region_manual_control_manual_control_region_decreasing_speed:
			self.__exit_sequence_main_region_manual_control_manual_control_region_decreasing_speed()
			self.__exit_action_main_region_manual_control()
		elif state == self.State.main_region_manual_control_manual_control_region_increasing_speed:
			self.__exit_sequence_main_region_manual_control_manual_control_region_increasing_speed()
			self.__exit_action_main_region_manual_control()
		elif state == self.State.main_region_manual_control_manual_control_region_turning_right:
			self.__exit_sequence_main_region_manual_control_manual_control_region_turning_right()
			self.__exit_action_main_region_manual_control()
		elif state == self.State.main_region_manual_control_manual_control_region_turning_left:
			self.__exit_sequence_main_region_manual_control_manual_control_region_turning_left()
			self.__exit_action_main_region_manual_control()
		elif state == self.State.main_region_automatic_exploration_general_normal_moving:
			self.__exit_sequence_main_region_automatic_exploration_general_normal_moving()
		elif state == self.State.main_region_automatic_exploration_general_left_wall_disappeared:
			self.__exit_sequence_main_region_automatic_exploration_general_left_wall_disappeared()
		elif state == self.State.main_region_automatic_exploration_general_wall_in_front:
			self.__exit_sequence_main_region_automatic_exploration_general_wall_in_front()
		elif state == self.State.main_region_automatic_exploration_general_turn_left:
			self.__exit_sequence_main_region_automatic_exploration_general_turn_left()
		elif state == self.State.main_region_automatic_exploration_general_move_forward:
			self.__exit_sequence_main_region_automatic_exploration_general_move_forward()
		elif state == self.State.main_region_automatic_exploration_general_turn_and_go:
			self.__exit_sequence_main_region_automatic_exploration_general_turn_and_go()
		elif state == self.State.main_region_automatic_exploration_general_go:
			self.__exit_sequence_main_region_automatic_exploration_general_go()
		elif state == self.State.main_region_automatic_exploration_general_return:
			self.__exit_sequence_main_region_automatic_exploration_general_return()
		elif state == self.State.main_region_automatic_exploration_general_to_right:
			self.__exit_sequence_main_region_automatic_exploration_general_to_right()
		elif state == self.State.main_region_automatic_exploration_general_go2:
			self.__exit_sequence_main_region_automatic_exploration_general_go2()
		state = self.__state_vector[1]
		if state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1normal:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1moving:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving()
		state = self.__state_vector[2]
		if state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2normal:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_left:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_right:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_back:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2plus:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2minus:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2()
		state = self.__state_vector[3]
		if state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1normal:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1negative_rotation:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1positive_rotation:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr2:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr3:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr2:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3()
		
	def __exit_sequence_main_region_calibration_process_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_calibration_process_r1idle:
			self.__exit_sequence_main_region_calibration_process_r1_idle()
		elif state == self.State.main_region_calibration_process_r1offset_calibration:
			self.__exit_sequence_main_region_calibration_process_r1_offset_calibration()
		elif state == self.State.main_region_calibration_process_r1offset_correction:
			self.__exit_sequence_main_region_calibration_process_r1_offset_correction()
		elif state == self.State.main_region_calibration_process_r1aligned:
			self.__exit_sequence_main_region_calibration_process_r1_aligned()
		elif state == self.State.main_region_calibration_process_r1calibration_completeted:
			self.__exit_sequence_main_region_calibration_process_r1_calibration_completeted()
		
	def __exit_sequence_main_region_manual_control_manual_control_region(self):
		"""Default exit sequence for region manual control region.
		"""
		#Default exit sequence for region manual control region
		state = self.__state_vector[0]
		if state == self.State.main_region_manual_control_manual_control_region_idle:
			self.__exit_sequence_main_region_manual_control_manual_control_region_idle()
		elif state == self.State.main_region_manual_control_manual_control_region_in_action:
			self.__exit_sequence_main_region_manual_control_manual_control_region_in_action()
		elif state == self.State.main_region_manual_control_manual_control_region_decreasing_speed:
			self.__exit_sequence_main_region_manual_control_manual_control_region_decreasing_speed()
		elif state == self.State.main_region_manual_control_manual_control_region_increasing_speed:
			self.__exit_sequence_main_region_manual_control_manual_control_region_increasing_speed()
		elif state == self.State.main_region_manual_control_manual_control_region_turning_right:
			self.__exit_sequence_main_region_manual_control_manual_control_region_turning_right()
		elif state == self.State.main_region_manual_control_manual_control_region_turning_left:
			self.__exit_sequence_main_region_manual_control_manual_control_region_turning_left()
		
	def __exit_sequence_main_region_automatic_exploration_general(self):
		"""Default exit sequence for region general.
		"""
		#Default exit sequence for region general
		state = self.__state_vector[0]
		if state == self.State.main_region_automatic_exploration_general_normal_moving:
			self.__exit_sequence_main_region_automatic_exploration_general_normal_moving()
		elif state == self.State.main_region_automatic_exploration_general_left_wall_disappeared:
			self.__exit_sequence_main_region_automatic_exploration_general_left_wall_disappeared()
		elif state == self.State.main_region_automatic_exploration_general_wall_in_front:
			self.__exit_sequence_main_region_automatic_exploration_general_wall_in_front()
		elif state == self.State.main_region_automatic_exploration_general_turn_left:
			self.__exit_sequence_main_region_automatic_exploration_general_turn_left()
		elif state == self.State.main_region_automatic_exploration_general_move_forward:
			self.__exit_sequence_main_region_automatic_exploration_general_move_forward()
		elif state == self.State.main_region_automatic_exploration_general_turn_and_go:
			self.__exit_sequence_main_region_automatic_exploration_general_turn_and_go()
		elif state == self.State.main_region_automatic_exploration_general_go:
			self.__exit_sequence_main_region_automatic_exploration_general_go()
		elif state == self.State.main_region_automatic_exploration_general_return:
			self.__exit_sequence_main_region_automatic_exploration_general_return()
		elif state == self.State.main_region_automatic_exploration_general_to_right:
			self.__exit_sequence_main_region_automatic_exploration_general_to_right()
		elif state == self.State.main_region_automatic_exploration_general_go2:
			self.__exit_sequence_main_region_automatic_exploration_general_go2()
		
	def __exit_sequence_main_region_automatic_exploration_moving(self):
		"""Default exit sequence for region moving.
		"""
		#Default exit sequence for region moving
		state = self.__state_vector[1]
		if state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1normal:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1moving:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving()
		state = self.__state_vector[2]
		if state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2normal:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_left:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_right:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_back:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2plus:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2minus:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2()
		state = self.__state_vector[3]
		if state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1normal:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1negative_rotation:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1positive_rotation:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr2:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr3:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr2:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3()
		
	def __exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[3]
		if state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1normal:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1negative_rotation:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1positive_rotation:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr2:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr3:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr2:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2()
		elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3:
			self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3()
		
	def __react_main_region_calibration_process_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_calibration_process_r1_idle_default()
		
	def __react_main_region_manual_control_manual_control_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_manual_control_manual_control_region_idle_default()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_manual_control_default()
		
	def __react_main_region_automatic_exploration_general__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_automatic_exploration_general_normal_moving_default()
		
	def __react_main_region_automatic_exploration_moving__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_default()
		
	def __react_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal_default()
		
	def __react_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal_default()
		
	def __react_main_region_automatic_exploration_moving_moving_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_default()
		
	def __react_main_region_automatic_exploration_moving_moving_r2__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_default()
		
	def __react_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		#State machine reactions.
		return transitioned_before
	
	
	def __main_region_calibration_process_react(self, transitioned_before):
		"""Implementation of __main_region_calibration_process_react function.
		"""
		#The reactions of state Calibration Process.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#Always execute local reactions.
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_calibration_process_r1_idle_react(self, transitioned_before):
		"""Implementation of __main_region_calibration_process_r1_idle_react function.
		"""
		#The reactions of state Idle.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state Idle
			self.__state_vector[0] = self.State.main_region_calibration_process
			self.__state_conf_vector_position = 0
			#'default' enter sequence for state Offset Calibration
			self.__entry_action_main_region_calibration_process_r1_offset_calibration()
			self.__state_vector[0] = self.State.main_region_calibration_process_r1offset_calibration
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
			self.__main_region_calibration_process_react(0)
		else:
			#Always execute local reactions.
			transitioned_after = self.__main_region_calibration_process_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_calibration_process_r1_offset_calibration_react(self, transitioned_before):
		"""Implementation of __main_region_calibration_process_r1_offset_calibration_react function.
		"""
		#The reactions of state Offset Calibration.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if not self.__aligned:
					self.__exit_sequence_main_region_calibration_process_r1_offset_calibration()
					self.__enter_sequence_main_region_calibration_process_r1_offset_correction_default()
					self.__main_region_calibration_process_react(0)
					transitioned_after = 0
				elif self.__aligned:
					self.__exit_sequence_main_region_calibration_process_r1_offset_calibration()
					self.__enter_sequence_main_region_calibration_process_r1_aligned_default()
					self.__main_region_calibration_process_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_calibration_process_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_calibration_process_r1_offset_correction_react(self, transitioned_before):
		"""Implementation of __main_region_calibration_process_r1_offset_correction_react function.
		"""
		#The reactions of state Offset Correction.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state Offset Correction
			self.__state_vector[0] = self.State.main_region_calibration_process
			self.__state_conf_vector_position = 0
			self.__exit_action_main_region_calibration_process_r1_offset_correction()
			#'default' enter sequence for state Offset Calibration
			self.__entry_action_main_region_calibration_process_r1_offset_calibration()
			self.__state_vector[0] = self.State.main_region_calibration_process_r1offset_calibration
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
			self.__main_region_calibration_process_react(0)
		else:
			#Always execute local reactions.
			transitioned_after = self.__main_region_calibration_process_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_calibration_process_r1_aligned_react(self, transitioned_before):
		"""Implementation of __main_region_calibration_process_r1_aligned_react function.
		"""
		#The reactions of state Aligned.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state Aligned
			self.__state_vector[0] = self.State.main_region_calibration_process
			self.__state_conf_vector_position = 0
			#'default' enter sequence for state Calibration Completeted
			self.__entry_action_main_region_calibration_process_r1_calibration_completeted()
			self.__state_vector[0] = self.State.main_region_calibration_process_r1calibration_completeted
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
			self.__main_region_calibration_process_react(0)
		else:
			#Always execute local reactions.
			transitioned_after = self.__main_region_calibration_process_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_calibration_process_r1_calibration_completeted_react(self, transitioned_before):
		"""Implementation of __main_region_calibration_process_r1_calibration_completeted_react function.
		"""
		#The reactions of state Calibration Completeted.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#Always execute local reactions.
			transitioned_after = self.__main_region_calibration_process_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_manual_control_react(self, transitioned_before):
		"""Implementation of __main_region_manual_control_react function.
		"""
		#The reactions of state Manual Control.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.__time_events[0]:
					self.__exit_sequence_main_region_manual_control()
					self.__time_events[0] = False
					self.__enter_sequence_main_region_calibration_process_default()
					self.__react(0)
					transitioned_after = 0
				elif self.computer.m_press:
					self.__exit_sequence_main_region_manual_control()
					self.__enter_sequence_main_region_automatic_exploration_default()
					self.__react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_manual_control_manual_control_region_idle_react(self, transitioned_before):
		"""Implementation of __main_region_manual_control_manual_control_region_idle_react function.
		"""
		#The reactions of state Idle.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.a_press:
					self.__exit_sequence_main_region_manual_control_manual_control_region_idle()
					self.__enter_sequence_main_region_manual_control_manual_control_region_turning_left_default()
					self.__main_region_manual_control_react(0)
					transitioned_after = 0
				elif self.computer.d_press:
					self.__exit_sequence_main_region_manual_control_manual_control_region_idle()
					self.__enter_sequence_main_region_manual_control_manual_control_region_turning_right_default()
					self.__main_region_manual_control_react(0)
					transitioned_after = 0
				elif self.computer.w_press:
					self.__exit_sequence_main_region_manual_control_manual_control_region_idle()
					self.__enter_sequence_main_region_manual_control_manual_control_region_increasing_speed_default()
					self.__main_region_manual_control_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_manual_control_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_manual_control_manual_control_region_in_action_react(self, transitioned_before):
		"""Implementation of __main_region_manual_control_manual_control_region_in_action_react function.
		"""
		#The reactions of state In action.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.w_press:
					self.__exit_sequence_main_region_manual_control_manual_control_region_in_action()
					self.__enter_sequence_main_region_manual_control_manual_control_region_increasing_speed_default()
					self.__main_region_manual_control_react(0)
					transitioned_after = 0
				elif self.computer.x_press:
					self.__exit_sequence_main_region_manual_control_manual_control_region_in_action()
					self.__enter_sequence_main_region_manual_control_manual_control_region_decreasing_speed_default()
					self.__main_region_manual_control_react(0)
					transitioned_after = 0
				elif self.computer.s_press:
					self.__exit_sequence_main_region_manual_control_manual_control_region_in_action()
					self.__enter_sequence_main_region_manual_control_manual_control_region_idle_default()
					self.__main_region_manual_control_react(0)
					transitioned_after = 0
				elif self.computer.d_press:
					self.__exit_sequence_main_region_manual_control_manual_control_region_in_action()
					self.__enter_sequence_main_region_manual_control_manual_control_region_turning_right_default()
					self.__main_region_manual_control_react(0)
					transitioned_after = 0
				elif self.computer.a_press:
					self.__exit_sequence_main_region_manual_control_manual_control_region_in_action()
					self.__enter_sequence_main_region_manual_control_manual_control_region_turning_left_default()
					self.__main_region_manual_control_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_manual_control_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_manual_control_manual_control_region_decreasing_speed_react(self, transitioned_before):
		"""Implementation of __main_region_manual_control_manual_control_region_decreasing_speed_react function.
		"""
		#The reactions of state Decreasing speed.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state Decreasing speed
			self.__state_vector[0] = self.State.main_region_manual_control
			self.__state_conf_vector_position = 0
			#'default' enter sequence for state In action
			self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_in_action
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
			self.__main_region_manual_control_react(0)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_manual_control_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_manual_control_manual_control_region_increasing_speed_react(self, transitioned_before):
		"""Implementation of __main_region_manual_control_manual_control_region_increasing_speed_react function.
		"""
		#The reactions of state Increasing speed.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state Increasing speed
			self.__state_vector[0] = self.State.main_region_manual_control
			self.__state_conf_vector_position = 0
			#'default' enter sequence for state In action
			self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_in_action
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
			self.__main_region_manual_control_react(0)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_manual_control_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_manual_control_manual_control_region_turning_right_react(self, transitioned_before):
		"""Implementation of __main_region_manual_control_manual_control_region_turning_right_react function.
		"""
		#The reactions of state Turning right.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state Turning right
			self.__state_vector[0] = self.State.main_region_manual_control
			self.__state_conf_vector_position = 0
			#'default' enter sequence for state In action
			self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_in_action
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
			self.__main_region_manual_control_react(0)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_manual_control_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_manual_control_manual_control_region_turning_left_react(self, transitioned_before):
		"""Implementation of __main_region_manual_control_manual_control_region_turning_left_react function.
		"""
		#The reactions of state Turning left.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state Turning left
			self.__state_vector[0] = self.State.main_region_manual_control
			self.__state_conf_vector_position = 0
			#'default' enter sequence for state In action
			self.__state_vector[0] = self.State.main_region_manual_control_manual_control_region_in_action
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
			self.__main_region_manual_control_react(0)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_manual_control_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_react function.
		"""
		#The reactions of state automatic exploration.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.m_press:
					self.__exit_sequence_main_region_automatic_exploration()
					self.__enter_sequence_main_region_manual_control_default()
					self.__react(0)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_normal_moving_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_normal_moving_react function.
		"""
		#The reactions of state normal_moving.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.laser_distance.d0 < (self.grid.grid_size / 2.0):
					self.__exit_sequence_main_region_automatic_exploration_general_normal_moving()
					self.__enter_sequence_main_region_automatic_exploration_general_wall_in_front_default()
					transitioned_after = 0
				elif self.laser_distance.d90 > self.grid.grid_size:
					self.__exit_sequence_main_region_automatic_exploration_general_normal_moving()
					self.__enter_sequence_main_region_automatic_exploration_general_left_wall_disappeared_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_left_wall_disappeared_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_left_wall_disappeared_react function.
		"""
		#The reactions of state left_wall_disappeared.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.user_var.move < 0:
					self.__exit_sequence_main_region_automatic_exploration_general_left_wall_disappeared()
					self.__enter_sequence_main_region_automatic_exploration_general_turn_left_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_wall_in_front_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_wall_in_front_react function.
		"""
		#The reactions of state wall_in_front.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if (self.__time_events[1]) and (self.laser_distance.dm90 < self.grid.grid_size):
					self.__exit_sequence_main_region_automatic_exploration_general_wall_in_front()
					self.__time_events[1] = False
					self.__enter_sequence_main_region_automatic_exploration_general_return_default()
					transitioned_after = 0
				elif (self.__time_events[2]) and (self.laser_distance.dm90 > 0.5):
					self.__exit_sequence_main_region_automatic_exploration_general_wall_in_front()
					self.__time_events[2] = False
					self.__enter_sequence_main_region_automatic_exploration_general_to_right_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_turn_left_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_turn_left_react function.
		"""
		#The reactions of state turn left.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if not self.user_var.turn_left:
					self.__exit_sequence_main_region_automatic_exploration_general_turn_left()
					self.__enter_sequence_main_region_automatic_exploration_general_move_forward_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_move_forward_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_move_forward_react function.
		"""
		#The reactions of state move forward.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.user_var.move < 0.0 and self.laser_distance.d90 > self.grid.grid_size:
					self.__exit_sequence_main_region_automatic_exploration_general_move_forward()
					self.__enter_sequence_main_region_automatic_exploration_general_turn_and_go_default()
					transitioned_after = 0
				elif self.user_var.move < 0.0 and self.laser_distance.d90 < self.grid.grid_size:
					self.__exit_sequence_main_region_automatic_exploration_general_move_forward()
					self.__enter_sequence_main_region_automatic_exploration_general_normal_moving_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_turn_and_go_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_turn_and_go_react function.
		"""
		#The reactions of state turn and go.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if not self.user_var.turn_left:
					self.__exit_sequence_main_region_automatic_exploration_general_turn_and_go()
					self.__enter_sequence_main_region_automatic_exploration_general_go_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_go_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_go_react function.
		"""
		#The reactions of state go.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.user_var.move < 0.0:
					self.__exit_sequence_main_region_automatic_exploration_general_go()
					self.__enter_sequence_main_region_automatic_exploration_general_normal_moving_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_return_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_return_react function.
		"""
		#The reactions of state return.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if not self.user_var.turn_back:
					self.__exit_sequence_main_region_automatic_exploration_general_return()
					self.__enter_sequence_main_region_automatic_exploration_general_normal_moving_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_to_right_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_to_right_react function.
		"""
		#The reactions of state to right.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if not self.user_var.turn_right:
					self.__exit_sequence_main_region_automatic_exploration_general_to_right()
					self.__enter_sequence_main_region_automatic_exploration_general_go2_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_general_go2_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_general_go2_react function.
		"""
		#The reactions of state go2.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.user_var.move < 0.0:
					self.__exit_sequence_main_region_automatic_exploration_general_go2()
					self.__enter_sequence_main_region_automatic_exploration_general_normal_moving_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_react function.
		"""
		#The reactions of state moving.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react function.
		"""
		#The reactions of state move and turn back.
		return transitioned_before
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal_react function.
		"""
		#The reactions of state normal.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.user_var.move > 0.0:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving_react function.
		"""
		#The reactions of state moving.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if ((((self.odom.x - self.user_var.xmem)) * ((self.odom.x - self.user_var.xmem))) + (((self.odom.y - self.user_var.ymem)) * ((self.odom.y - self.user_var.ymem)))) > (self.user_var.move * self.user_var.move):
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving()
					self.output.speed = 0.0
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal_react function.
		"""
		#The reactions of state normal.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 2:
				if self.user_var.turn_left:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left_default()
					self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
					transitioned_after = 2
				elif self.user_var.turn_right:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right_default()
					self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
					transitioned_after = 2
				elif self.user_var.turn_back:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back_default()
					self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
					transitioned_after = 2
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left_react function.
		"""
		#The reactions of state turnLeft.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state turnLeft
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
			self.__state_conf_vector_position = 2
			#'default' enter sequence for state processingAngle
			self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle
			self.__state_conf_vector_position = 2
			self.__state_conf_vector_changed = True
			self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right_react function.
		"""
		#The reactions of state turnRight.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state turnRight
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
			self.__state_conf_vector_position = 2
			#'default' enter sequence for state processingAngle
			self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle
			self.__state_conf_vector_position = 2
			self.__state_conf_vector_changed = True
			self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back_react function.
		"""
		#The reactions of state turnBack.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state turnBack
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
			self.__state_conf_vector_position = 2
			#'default' enter sequence for state processingAngle
			self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle
			self.__state_conf_vector_position = 2
			self.__state_conf_vector_changed = True
			self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle_react function.
		"""
		#The reactions of state processingAngle.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 2:
				if self.user_var.angle_targ <= -(180.0):
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus_default()
					self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
					transitioned_after = 2
				elif self.user_var.angle_targ > 180.0:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus_default()
					self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
					transitioned_after = 2
				elif self.__time_events[3]:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle()
					self.__time_events[3] = False
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2_default()
					self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
					transitioned_after = 2
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus_react function.
		"""
		#The reactions of state plus.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state plus
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
			self.__state_conf_vector_position = 2
			#'default' enter sequence for state processingAngle2
			self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2()
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2
			self.__state_conf_vector_position = 2
			self.__state_conf_vector_changed = True
			self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus_react function.
		"""
		#The reactions of state minus.
		transitioned_after = transitioned_before
		if self.__do_completion:
			#Default exit sequence for state minus
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back
			self.__state_conf_vector_position = 2
			#'default' enter sequence for state processingAngle2
			self.__entry_action_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2()
			self.__state_vector[2] = self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2
			self.__state_conf_vector_position = 2
			self.__state_conf_vector_changed = True
			self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
		else:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2_react function.
		"""
		#The reactions of state processingAngle2.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 2:
				if self.finished_turn:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal_default()
					self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(1)
					transitioned_after = 2
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r2_turn_impl_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r2_turn_impl_react function.
		"""
		#The reactions of state turnImpl.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal_react function.
		"""
		#The reactions of state normal.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if (self.start_turn) and (self.user_var.angle_targ <= 0.0):
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation_default()
					self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(3)
					transitioned_after = 3
				elif (self.start_turn) and (self.user_var.angle_targ >= 0.0):
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation_default()
					self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(3)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation_react function.
		"""
		#The reactions of state negativeRotation.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if (self.imu.yaw - self.user_var.angle_targ) > 0.0 and (self.imu.yaw - self.user_var.angle_targ) < self.__ct_thr1:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2_default()
					self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(3)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation_react function.
		"""
		#The reactions of state positiveRotation.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if (self.imu.yaw - self.user_var.angle_targ) < 0.0 and (self.imu.yaw - self.user_var.angle_targ) > -(self.__ct_thr1):
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2_default()
					self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(3)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2_react function.
		"""
		#The reactions of state pR2.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if (self.imu.yaw - self.user_var.angle_targ) > -(self.__ct_thr2):
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3_default()
					self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(3)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3_react function.
		"""
		#The reactions of state pR3.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if (self.imu.yaw - self.user_var.angle_targ) > 0.0 or self.imu.yaw < -(90.0):
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal_default()
					self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(3)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2_react function.
		"""
		#The reactions of state nR2.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if (self.imu.yaw - self.user_var.angle_targ) < self.__ct_thr2:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3_default()
					self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(3)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3_react(self, transitioned_before):
		"""Implementation of __main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3_react function.
		"""
		#The reactions of state nR3.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if (self.imu.yaw - self.user_var.angle_targ) < 0.0 or self.imu.yaw > 90.0:
					self.__exit_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3()
					self.__enter_sequence_main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal_default()
					self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(3)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_react(transitioned_before)
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.computer.m_press = False
		self.computer.w_press = False
		self.computer.a_press = False
		self.computer.s_press = False
		self.computer.d_press = False
		self.computer.x_press = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
	
	
	def __clear_internal_events(self):
		"""Implementation of __clear_internal_events function.
		"""
		self.start_turn = False
		self.finished_turn = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_calibration_process_r1idle:
			transitioned = self.__main_region_calibration_process_r1_idle_react(transitioned)
		elif state == self.State.main_region_calibration_process_r1offset_calibration:
			transitioned = self.__main_region_calibration_process_r1_offset_calibration_react(transitioned)
		elif state == self.State.main_region_calibration_process_r1offset_correction:
			transitioned = self.__main_region_calibration_process_r1_offset_correction_react(transitioned)
		elif state == self.State.main_region_calibration_process_r1aligned:
			transitioned = self.__main_region_calibration_process_r1_aligned_react(transitioned)
		elif state == self.State.main_region_calibration_process_r1calibration_completeted:
			transitioned = self.__main_region_calibration_process_r1_calibration_completeted_react(transitioned)
		elif state == self.State.main_region_manual_control_manual_control_region_idle:
			transitioned = self.__main_region_manual_control_manual_control_region_idle_react(transitioned)
		elif state == self.State.main_region_manual_control_manual_control_region_in_action:
			transitioned = self.__main_region_manual_control_manual_control_region_in_action_react(transitioned)
		elif state == self.State.main_region_manual_control_manual_control_region_decreasing_speed:
			transitioned = self.__main_region_manual_control_manual_control_region_decreasing_speed_react(transitioned)
		elif state == self.State.main_region_manual_control_manual_control_region_increasing_speed:
			transitioned = self.__main_region_manual_control_manual_control_region_increasing_speed_react(transitioned)
		elif state == self.State.main_region_manual_control_manual_control_region_turning_right:
			transitioned = self.__main_region_manual_control_manual_control_region_turning_right_react(transitioned)
		elif state == self.State.main_region_manual_control_manual_control_region_turning_left:
			transitioned = self.__main_region_manual_control_manual_control_region_turning_left_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_normal_moving:
			transitioned = self.__main_region_automatic_exploration_general_normal_moving_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_left_wall_disappeared:
			transitioned = self.__main_region_automatic_exploration_general_left_wall_disappeared_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_wall_in_front:
			transitioned = self.__main_region_automatic_exploration_general_wall_in_front_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_turn_left:
			transitioned = self.__main_region_automatic_exploration_general_turn_left_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_move_forward:
			transitioned = self.__main_region_automatic_exploration_general_move_forward_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_turn_and_go:
			transitioned = self.__main_region_automatic_exploration_general_turn_and_go_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_go:
			transitioned = self.__main_region_automatic_exploration_general_go_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_return:
			transitioned = self.__main_region_automatic_exploration_general_return_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_to_right:
			transitioned = self.__main_region_automatic_exploration_general_to_right_react(transitioned)
		elif state == self.State.main_region_automatic_exploration_general_go2:
			transitioned = self.__main_region_automatic_exploration_general_go2_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1normal:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_normal_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r1moving:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r1_moving_react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2normal:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_normal_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_left:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_left_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_right:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_right_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2turn_back:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_turn_back_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2plus:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_plus_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2minus:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_minus_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r1move_and_turn_back_r2processing_angle2:
				transitioned = self.__main_region_automatic_exploration_moving_moving_r1_move_and_turn_back_r2_processing_angle2_react(transitioned)
		if self.__state_conf_vector_position < 3:
			state = self.__state_vector[3]
			if state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1normal:
				self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_normal_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1negative_rotation:
				self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_negative_rotation_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1positive_rotation:
				self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_positive_rotation_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr2:
				self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r2_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1pr3:
				self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_p_r3_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr2:
				self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r2_react(transitioned)
			elif state == self.State.main_region_automatic_exploration_moving_moving_r2turn_impl_r1nr3:
				self.__main_region_automatic_exploration_moving_moving_r2_turn_impl_r1_n_r3_react(transitioned)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		#Performs a 'run to completion' step.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__do_completion = False
			condition_1 = True
			while condition_1:
				if self.__completed:
					self.__do_completion = True
				self.__completed = False
				self.__micro_step()
				self.__do_completion = False
				condition_1 = self.__completed
			self.__clear_in_events()
			self.__clear_internal_events()
			condition_0 = False
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
				condition_0 = True
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		#Activates the state machine.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default enter sequence for statechart model
		self.__enter_sequence_main_region_default()
		self.__do_completion = False
		condition_0 = True
		while condition_0:
			if self.__completed:
				self.__do_completion = True
			self.__completed = False
			self.__micro_step()
			self.__do_completion = False
			condition_0 = self.__completed
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		#Deactivates the state machine.
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default exit sequence for statechart model
		self.__exit_sequence_main_region()
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__is_executing = False
	
	
	def trigger_without_event(self):
		"""Implementation of triggerWithoutEvent function.
		"""
		self.run_cycle()
	
